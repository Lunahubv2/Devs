-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- GitHub Repository info
local GITHUB_USERNAME = "Lunahubv2"
local GITHUB_REPO = "Devs"
local GITHUB_TOKEN = "your_github_token_here" -- Use a personal access token for authentication safely

-- Platoboost configuration
local service = 362  -- Your service ID
local secret = "b613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad"  -- Your secret key for security
local useNonce = true  -- Use a nonce to prevent replay attacks

-- Callbacks
local onMessage = function(message) 
    print(message) -- Print messages to console for debugging
end

-- Wait for the game to load completely
repeat task.wait(1) until game:IsLoaded()

-- Functions
local requestSending = false
local fRequest = request or http_request or syn_request
local fOsTime = os.time
local fMathRandom = math.random
local fGetUserId = function() return game.Players.LocalPlayer.UserId end -- Changed from HWID to UserId
local cachedLink, cachedTime = "", 0 -- Variables for caching

-- Pick host
local host = "https://api.platoboost.com"
local hostResponse = fRequest({
    Url = host .. "/public/connectivity",
    Method = "GET"
})
if hostResponse.StatusCode ~= 200 then
    host = "https://api.platoboost.net"
end

-- Function to encode data to JSON
local function lEncode(data)
    return HttpService:JSONEncode(data)
end

-- Function to decode JSON data
local function lDecode(data)
    return HttpService:JSONDecode(data)
end

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Parent = Players.LocalPlayer.PlayerGui
gui.ResetOnSpawn = false 

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.4, 0, 0.6, 0)
frame.Position = UDim2.new(0.3, 0, 0.2, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Parent = gui

-- UI Elements (TextLabel, TextBox, Buttons) setup here (similar to your original GUI setup)

local textBox = Instance.new("TextBox", frame)
textBox.Size = UDim2.new(0.499, 0, 0.18, 0)
textBox.Position = UDim2.new(0.25, 0, 0.43, 0)
textBox.PlaceholderText = "Enter Key Here..."
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.BackgroundTransparency = 1

local submitButton = Instance.new("TextButton", frame)
submitButton.Size = UDim2.new(0.3, 0, 0.18, 0)
submitButton.Position = UDim2.new(0.1, 0, 0.73, 0)
submitButton.Text = "Submit Key"

-- Function to get content of the user's key file
local function getFileContent(userId)
    local filePath = "keys/" .. userId .. ".txt" -- File path will be user-specific
    local url = "https://api.github.com/repos/" .. GITHUB_USERNAME .. "/" .. GITHUB_REPO .. "/contents/" .. filePath
    local headers = {
        ["Authorization"] = "token " .. GITHUB_TOKEN,
        ["Accept"] = "application/vnd.github.v3+json"
    }

    local success, response = pcall(function()
        return HttpService:GetAsync(url, true, headers)
    end)

    if success and response then
        local data = HttpService:JSONDecode(response)
        return HttpService:Base64Decode(data.content) -- Decode the content from Base64
    else
        warn("Failed to get file content: ", response)
        return nil
    end
end

-- Function to save the key to the user's file
local function saveKey(key)
    local userId = tostring(fGetUserId()) -- Get the player's User ID as a string
    local content = getFileContent(userId) or ""

    -- Add new key to the content
    content = content .. key .. "\n"

    local filePath = "keys/" .. userId .. ".txt" -- File path will be user-specific
    local url = "https://api.github.com/repos/" .. GITHUB_USERNAME .. "/" .. GITHUB_REPO .. "/contents/" .. filePath
    local headers = {
        ["Authorization"] = "token " .. GITHUB_TOKEN,
        ["Content-Type"] = "application/json"
    }

    local sha = nil
    if content then
        local existingContent = HttpService:JSONDecode(HttpService:GetAsync(url, true, headers))
        sha = existingContent.sha -- Get the SHA of the existing file
    end

    local body = {
        message = "Adding key for UserID: " .. userId,
        content = HttpService:Base64Encode(content),
        sha = sha -- Include SHA for updating
    }

    local success, response = pcall(function()
        return HttpService:PutAsync(url, HttpService:JSONEncode(body), Enum.HttpContentType.ApplicationJson, false, headers)
    end)

    if success then
        print("Key saved successfully for UserID: " .. userId)
    else
        warn("Failed to save key: ", response)
    end
end

-- Cache Link Function
function cacheLink()
    if (not cachedLink or cachedTime + (10 * 60) < fOsTime()) then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = fGetUserId() -- Now using UserId
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })

        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body)

            if decoded.success then
                cachedLink = decoded.data.url
                cachedTime = fOsTime()
                return true, cachedLink
            else
                onMessage(decoded.message)
                return false, decoded.message
            end
        elseif response.StatusCode == 429 then
            local msg = "You are being rate limited, please wait 20 seconds and try again."
            onMessage(msg)
            return false, msg
        end

        local msg = "Failed to cache link."
        onMessage(msg)
        return false, msg
    else
        return true, cachedLink
    end
end

-- Redeem key function
local function redeemKey(key)
    local nonce = generateNonce()
    local endpoint = host .. "/public/redeem/" .. tostring(service)

    local body = {
        identifier = fGetUserId(), -- Now using UserId
        key = key,
        nonce = useNonce and nonce or nil
    }

    local response = fRequest({
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = { ["Content-Type"] = "application/json" }
    })

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if decoded.success and decoded.data.valid then
            onMessage("Key redeemed successfully!")
            return true
        else
            onMessage("Invalid key.")
            return false
        end
    else
        onMessage("Error redeeming key: " .. response.StatusCode)
        return false
    end
end

-- Verify key function
local function verifyKey(key)
    if requestSending then
        onMessage("A request is already being sent, please slow down.")
        return false
    else
        requestSending = true
    end

    local nonce = generateNonce()
    local endpoint = host .. "/public/whitelist/" .. tostring(service) .. "?identifier=" .. fGetUserId() .. "&key=" .. key

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce
    end

    local response = fRequest({
        Url = endpoint,
        Method = "GET"
    })

    requestSending = false

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body)
        if decoded.success and decoded.data.valid then
            onMessage("Key is valid!")
            return true
        else
            return redeemKey(key) -- Try redeeming the key if it is not valid
        end
    else
        onMessage("Error verifying key: " .. response.StatusCode)
        return false
    end
end

-- Event for Submit Key Button
submitButton.MouseButton1Click:Connect(function()
    local key = textBox.Text -- Get the input key from the TextBox
    if key and key ~= "" then
        saveKey(key) -- Save the key to GitHub
        
        local validKey = verifyKey(key) -- Verify the key
        if validKey then
            textBox.Text = "[KeySystem] Valid Key!"
            -- Load the script from the URL if needed
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Lunahubv2/LunaHubV2/main/source.lua"))()
            gui:Destroy() -- Destroy the GUI after loading the script
        else
            textBox.Text = "[KeySystem]ðŸ”‘ Invalid Key!"
            wait(1)
            textBox.Text = "[KeySystem]ðŸ”‘ Enter Key Here"
        end
    else
        warn("Please enter a valid key.")
    end
end)
